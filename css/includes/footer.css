.footer{padding:45px 0 56px}.footer__row{display:flex;align-items:flex-start;justify-content:space-between}.footer__item{flex:1 1 100%;display:flex;flex-direction:column;align-items:flex-start}.footer__item-title{font-size:13px;font-weight:700;margin-bottom:14px}.footer__item-link{display:inline-block;text-decoration:none;color:#fff;font-size:13px;margin:0 0 14px;max-width:150px;position:relative;padding-bottom:2px}.footer__item-link:last-child{margin-bottom:0}.footer__item-link:first-child{margin-top:0}.footer__item-link::after{content:'';width:100%;height:2px;background:#fff;transition:transform .2s ease;transform:scaleX(0);position:absolute;bottom:0;left:0}.footer__item-link:hover::after{transform:scaleX(1)}.footer__item-link.call{color:#1157ff}.footer__item-link.call::after{background:#1157ff}.footer__item:last-child{text-align:left;flex-basis:50%}@media (max-width:992px){.footer__item:last-child{flex-basis:80%}}@media (max-width:767px){.footer{padding:20px 0 15px}.footer__row{flex-wrap:wrap}.footer__item{text-align:left;flex-basis:50%;margin-bottom:30px}.footer__item:last-child{flex-basis:50%}}@media (max-width:480px){.footer{background:#101010;padding:35px 0 51px}.footer__item:nth-of-type(1){order:3;margin-bottom:0}.footer__item:nth-of-type(2){order:1}.footer__item:nth-of-type(3){order:2}.footer__item:nth-of-type(4){order:4;margin-bottom:0}.footer__item-logo{width:120px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
