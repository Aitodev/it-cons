@-webkit-keyframes draw{100%{stroke-dashoffset:0;stroke-dasharray:200}}@keyframes draw{100%{stroke-dashoffset:0;stroke-dasharray:200}}.brief{padding:65px 0}.brief__title{font-size:32px;font-weight:700;margin-bottom:30px}.brief__form-row{display:flex;align-items:center}.brief__form-left-content{position:relative}.brief__form-body{transition:all .4s ease-in-out}.brief__form-body-row{display:flex;align-items:center;margin-bottom:50px}.brief__form-body-row:last-child{margin-bottom:0}.brief__form-body.active{-webkit-filter:blur(10px) brightness(3);filter:blur(10px) brightness(3);pointer-events:none}.brief__form-input{position:relative;width:100%;max-width:270px;margin:0 16px}.brief__form-input:last-child{margin-right:0}.brief__form-input:first-child{margin-left:0}.brief__form-input .label{position:absolute;top:20px;left:0;font-size:16px;color:#fff;font-weight:500;transform-origin:0 0;transform:translate3d(0,0,0);transition:all .2s ease;pointer-events:none}.brief__form-input .focus-bg{position:absolute;top:0;left:0;width:100%;height:100%;z-index:-1;transform:scaleX(0);transform-origin:left}.brief__form-input input{width:100%;padding:14px 10px 14px 0;font-size:18px;font-weight:500;background:0 0;border:none;border-bottom:2px solid #707070;color:#fff;transition:all .15s ease;caret-color:#1157ff}.brief__form-input input:-webkit-autofill,.brief__form-input input:-webkit-autofill:focus .brief__form-input input:-webkit-autofill,.brief__form-input input:-webkit-autofill:hover{caret-color:#1157ff;-webkit-text-fill-color:#fff;box-shadow:0 0 0 1000px transparent inset;-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s;background:-webkit-linear-gradient(top,rgba(255,255,255,0) 0,rgba(0,174,255,.04) 50%,rgba(255,255,255,0) 51%,rgba(0,174,255,.03) 100%)}.brief__form-input input:hover{border-color:rgba(255,255,255,.8)}.brief__form-input input:not(:placeholder-shown)+.label{color:#1157ff;transform:translate3d(0,-30px,0) scale(.75)}.brief__form-input input:focus{outline:0;border-color:#fff}.brief__form-input input:focus+.label{color:#1157ff;transform:translate3d(0,-30px,0) scale(.75)}.brief__form-input input:focus+.focus-bg{transform:scaleX(1);transition:all .1s ease}.brief__form-btn{font:500 15px Muller,sans-serif;margin-top:30px;width:170px;padding:16px 0 14px;display:inline-block;border:1px solid #fff;text-align:center;border-radius:5px;text-decoration:none;cursor:pointer}.brief__form-btn.disabled{background:#707070;border-color:transparent;pointer-events:none}.brief__form-icon{width:250px;margin-left:120px}.brief__form-icon svg{width:100%;fill:none;stroke:#fff;stroke-width:.6;transition:all .2s ease-in-out}.brief__form-icon svg path{stroke-dasharray:200;stroke-dashoffset:-200}.brief__form-icon svg path:nth-of-type(1){-webkit-animation:draw 1.5s .5s forwards;animation:draw 1.5s .5s forwards}.brief__form-icon svg path:nth-of-type(2){-webkit-animation:draw 1.5s 1s forwards;animation:draw 1.5s 1s forwards}.brief__form-icon svg path:nth-of-type(3){-webkit-animation:draw 1.5s 1.5s forwards;animation:draw 1.5s 1.5s forwards}.brief__form-icon svg path:nth-of-type(4){-webkit-animation:draw 1.5s 2s forwards;animation:draw 1.5s 2s forwards}.brief__form__answer{width:100%;text-align:center;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:35px;font-weight:700;text-shadow:0 1px 3px rgba(255,255,255,.2);display:none}.brief__form__answer-success{display:none;color:#1157ff}.brief__form__answer-error{display:none;color:#e60b89}.brief__form__answer-loading{display:none}@media (max-width:992px){.brief__form-row{justify-content:space-between}.brief__form-icon{margin-left:60px}}@media (max-width:767px){.brief__form-row{flex-direction:column-reverse;align-items:flex-start}.brief__form-icon{margin-left:0;margin-bottom:50px}.brief__form-left-content{width:100%}.brief__form-input{max-width:inherit}}@media (max-width:480px){.brief__form-body-row{flex-direction:column;margin-bottom:0}.brief__form-body-row:first-child .brief__form-input:first-child{margin-top:0}.brief__form-body-row:last-child .brief__form-input:last-child{margin-bottom:0}.brief__form-input{margin:10px 0}.brief__form-btn{margin-top:40px;font-size:13px;width:150px}.brief__title{font-size:28px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
